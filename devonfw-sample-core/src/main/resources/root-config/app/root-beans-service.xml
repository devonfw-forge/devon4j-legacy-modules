<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security"
  xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
      <list>
        <value>classpath:/config/app/application-default.properties</value>
        <value>classpath:/config/env/application.properties</value>
        <value>classpath:/root-config/env/application.properties</value>
      </list>
    </property>
  </bean>

   <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" depends-on="flyway">
    <property name="packagesToScan">
      <list>
        <value>com.capgemini.devonfw.sample.*.dataaccess</value>
        <value>io.oasp.gastronomy.restaurant.*.dataaccess</value>
        <value>io.oasp.module.jpa.dataaccess.api</value>
      </list>
    </property>
    <property name="dataSource" ref="appDataSource"/>
    <property name="mappingResources" value="config/app/dataaccess/NamedQueries.xml"/>
    <property name="jpaVendorAdapter">
      <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="showSql" value="${database.hibernate.show.sql}"/>
        <property name="databasePlatform" value="${database.hibernate.dialect}"/>
      </bean>
    </property>
      <property name="jpaProperties">
          <map>
              <entry key="hibernate.hbm2ddl.auto" value="${database.hibernate.hbm2ddl.auto}" />
          </map>
      </property>
  </bean>

  <bean id="CORSFilter" class="com.capgemini.devonfw.sample.general.security.CORSFilter">
    <property name="disabled" value="${corsDisabled}"/>
  </bean>

  <bean id="SecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">
    <constructor-arg>
      <list>
        <!--JS Client is publicly available -->
        <security:filter-chain pattern="/jsclient/**" filters="none"/>
        <security:filter-chain pattern="/websocket/**" filters="none"/>

        <!--REST login without CSRF filter -->
        <security:filter-chain pattern="/services/rest/login"
            filters="RequestContextFilter,
                   CORSFilter,
                   SecurityContextPersistenceFilter,
                   RestLogoutFilter,
                   JsonUsernamePasswordAuthenticationFilter,
                   RequestCacheAwareFilter,
                   SecurityContextHolderAwareRequestFilter,
                   AnonymousAuthenticationFilter,
                   SessionManagementFilter,
                   RestExceptionTranslationFilter,
                   FilterSecurityInterceptor"/>
        <!-- REST Services intended for JS Client are secured based on a session cookies and have REST login/logout API -->
        <security:filter-chain pattern="/services/rest/**"
          filters="RequestContextFilter,
                   CORSFilter,
                   SecurityContextPersistenceFilter,
                   CsrfFilterWrapper,
                   RestLogoutFilter,
                   JsonUsernamePasswordAuthenticationFilter,
                   RequestCacheAwareFilter,
                   SecurityContextHolderAwareRequestFilter,
                   AnonymousAuthenticationFilter,
                   SessionManagementFilter,
                   RestExceptionTranslationFilter,
                   FilterSecurityInterceptor"/>
        <!-- Defaults to form based strategy -->
        <security:filter-chain pattern="/**"
          filters="RequestContextFilter,
                   CORSFilter,
                   SecurityContextPersistenceFilter,
                   LogoutFilter,
                   UsernamePasswordAuthenticationFilter,
                   RequestCacheAwareFilter,
                   SecurityContextHolderAwareRequestFilter,
                   AnonymousAuthenticationFilter,
                   SessionManagementFilter,
                   ExceptionTranslationFilter,
                   FilterSecurityInterceptor"/>
      </list>
    </constructor-arg>
  </bean>

  <context:component-scan base-package="com.capgemini.devonfw.sample.*.websocket"/>
  <context:component-scan base-package="com.capgemini.devonfw.sample.*.logic"/>
  <context:component-scan base-package="com.capgemini.devonfw.sample.*.service"/>
  <context:component-scan base-package="com.capgemini.devonfw.sample.*.dataaccess"/>

</beans>
